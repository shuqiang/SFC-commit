From d8ac60d508cd3cd8a0f8feb4795cc6f6239915e9 Mon Sep 17 00:00:00 2001
From: shuqianx <shuqiangx.zhao@intel.com>
Date: Wed, 14 Jan 2015 15:15:11 -0500
Subject: [PATCH] add API for multiple service function selection algorithms

Change-Id: Ie93f9a9ab01685be221ecdbe07d9ad00858bf956
Signed-off-by: shuqianx <shuqiangx.zhao@intel.com>
---

diff --git a/sfc-provider/src/main/java/org/opendaylight/sfc/provider/api/SfcProviderRenderedPathAPI.java b/sfc-provider/src/main/java/org/opendaylight/sfc/provider/api/SfcProviderRenderedPathAPI.java
index 522185d..003d672 100644
--- a/sfc-provider/src/main/java/org/opendaylight/sfc/provider/api/SfcProviderRenderedPathAPI.java
+++ b/sfc-provider/src/main/java/org/opendaylight/sfc/provider/api/SfcProviderRenderedPathAPI.java
@@ -36,6 +36,9 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Random;
 
 import static org.opendaylight.sfc.provider.SfcProviderDebug.printTraceStart;
 import static org.opendaylight.sfc.provider.SfcProviderDebug.printTraceStop;
@@ -74,6 +77,13 @@
                 }
             };
 
+    private static Map<java.lang.Class<? extends org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sft.rev140701.ServiceFunctionTypeIdentity>, Integer> mapCountRoundRobin = new HashMap<>();
+    private enum SfcSelectSfAlgorithmType{
+        ROUND_ROBIN, RANDOM;
+    }
+
+    SfcSelectSfAlgorithmType sfcSelectSfAlgorithmType = SfcSelectSfAlgorithmType.ROUND_ROBIN;
+
     @SuppressWarnings("unused")
     public static int numCreatedPathGetValue() {
         return numCreatedPath.get();
@@ -118,6 +128,61 @@
         return new SfcProviderRenderedPathAPI(params, paramsTypes, "updateRenderedServicePathEntry");
     }
 
+    public SfcSelectSfAlgorithmType getSfcSelectSfAlgorithmType()
+    {
+        return sfcSelectSfAlgorithmType;
+    }
+
+    public void setSfcSelectSfAlgorithmType(SfcSelectSfAlgorithmType sfcSelectSfAlgorithmType)
+    {
+        this.sfcSelectSfAlgorithmType = sfcSelectSfAlgorithmType;
+    }
+
+    public static String getRoundRobinServicePathHop(List<SftServiceFunctionName> sftServiceFunctionNameList, ServiceFunctionType serviceFunctionType)
+    {
+        int countRoundRobin = 0;
+
+        if(mapCountRoundRobin.size() != 0){
+            for(java.lang.Class<? extends org.opendaylight.yang.gen.v1.urn.cisco.params.xml.ns.yang.sfc.sft.rev140701.ServiceFunctionTypeIdentity> sfType: mapCountRoundRobin.keySet()){        
+                if(sfType.equals(serviceFunctionType.getType())){
+                    countRoundRobin = mapCountRoundRobin.get(sfType);
+                    LOG.debug("countRoundRobin: {}", countRoundRobin);
+                    break;
+                }
+            }
+        }
+
+        SftServiceFunctionName sftServiceFunctionName = sftServiceFunctionNameList.get(countRoundRobin);
+        countRoundRobin = (countRoundRobin + 1) % sftServiceFunctionNameList.size();
+        mapCountRoundRobin.put(serviceFunctionType.getType(), countRoundRobin);
+        return sftServiceFunctionName.getName();
+    }
+
+    public static String getRandomServicePathHop(List<SftServiceFunctionName> sftServiceFunctionNameList)
+    {
+        Random rad = new Random();
+        return sftServiceFunctionNameList.get(rad.nextInt(sftServiceFunctionNameList.size())).getName();
+    }
+
+    public static String sfcSelectServicePathHop(ServiceFunctionType serviceFunctionType, SfcSelectSfAlgorithmType sfcSelectSfAlgorithmType)
+    {
+        List<SftServiceFunctionName> sftServiceFunctionNameList = serviceFunctionType.getSftServiceFunctionName();
+        LOG.debug("ServiceFunction Name List : {}", sftServiceFunctionNameList);
+        String sfcSelectServicePathHopName = "";
+
+        switch(sfcSelectSfAlgorithmType){
+        case ROUND_ROBIN:
+            sfcSelectServicePathHopName = getRoundRobinServicePathHop(sftServiceFunctionNameList, serviceFunctionType);
+            break;
+        case RANDOM:
+        default:
+            sfcSelectServicePathHopName = getRandomServicePathHop(sftServiceFunctionNameList);
+            break;
+        }
+
+        return sfcSelectServicePathHopName;
+    }
+
     @SuppressWarnings("unused")
     protected void updateRenderedServicePathEntry (ServiceFunctionPath serviceFunctionPath) {
         this.createRenderedServicePathEntry(serviceFunctionPath);
@@ -357,27 +422,24 @@
             if (serviceFunctionType != null) {
                 List<SftServiceFunctionName> sftServiceFunctionNameList = serviceFunctionType.getSftServiceFunctionName();
                 if (!sftServiceFunctionNameList.isEmpty()) {
-                    for (SftServiceFunctionName sftServiceFunctionName : sftServiceFunctionNameList) {
-                        // TODO: API to select suitable Service Function
-                        String serviceFunctionName = sftServiceFunctionName.getName();
-                        ServiceFunction serviceFunction = SfcProviderServiceFunctionAPI
-                                .readServiceFunctionExecutor(serviceFunctionName);
-                        if (serviceFunction != null) {
-                            renderedServicePathHopBuilder.setHopNumber(posIndex)
-                                    .setServiceFunctionName(serviceFunctionName)
-                                    .setServiceIndex((short) serviceIndex)
-                                    .setServiceFunctionForwarder(serviceFunction.getSfDataPlaneLocator()
-                                            .get(0)
-                                            .getServiceFunctionForwarder());
-                            renderedServicePathHopArrayList.add(posIndex, renderedServicePathHopBuilder.build());
-                            serviceIndex--;
-                            posIndex++;
-                            break;
-                        } else {
-                            LOG.error("Could not find suitable SF of type in data store: {}",
-                                    sfcServiceFunction.getType());
-                            return ret;
-                        }
+                    String serviceFunctionName = sfcSelectServicePathHop(serviceFunctionType, sfcSelectSfAlgorithmType);
+                    LOG.debug("SelectSfAlgorithmType: {}, Selected ServiceFunction name: {}", sfcSelectSfAlgorithmType, serviceFunctionName);
+                    ServiceFunction serviceFunction = SfcProviderServiceFunctionAPI
+                            .readServiceFunctionExecutor(serviceFunctionName);
+                    if (serviceFunction != null) {
+                        renderedServicePathHopBuilder.setHopNumber(posIndex)
+                                .setServiceFunctionName(serviceFunctionName)
+                                .setServiceIndex((short) serviceIndex)
+                                .setServiceFunctionForwarder(serviceFunction.getSfDataPlaneLocator()
+                                        .get(0)
+                                        .getServiceFunctionForwarder());
+                        renderedServicePathHopArrayList.add(posIndex, renderedServicePathHopBuilder.build());
+                        serviceIndex--;
+                        posIndex++;
+                    } else {
+                        LOG.error("Could not find suitable SF of type in data store: {}",
+                                sfcServiceFunction.getType());
+                        return ret;
                     }
                 } else {
                     LOG.error("Could not create path because there are no configured SFs of type: {}",
